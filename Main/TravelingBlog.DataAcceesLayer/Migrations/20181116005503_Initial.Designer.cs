// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelingBlog.DataAcceesLayer.Data;

namespace TravelingBlog.DataAcceesLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181116005503_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Comment", b =>
                {
                    b.Property<int>("UserInfoId")
                        .HasColumnName("userinfoid");

                    b.Property<int>("TripId")
                        .HasColumnName("TripId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("Content");

                    b.HasKey("UserInfoId", "TripId")
                        .HasName("pk_constraint_comment");

                    b.HasIndex("TripId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MobCode")
                        .IsRequired()
                        .HasColumnName("mobilecode")
                        .HasMaxLength(5);

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasName("pk_constraint_country");

                    b.HasAlternateKey("MobCode")
                        .HasName("uq_constraint_mobcode_country");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.CountryPostBlog", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnName("countryid");

                    b.Property<int>("PostBlogId")
                        .HasColumnName("tripid");

                    b.HasKey("CountryId", "PostBlogId");

                    b.HasIndex("PostBlogId");

                    b.ToTable("CountryPostBlog");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.CountryTrip", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnName("countryid");

                    b.Property<int>("TripId")
                        .HasColumnName("tripid");

                    b.HasKey("CountryId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("CountryTrip");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("pk_constraint_Currency");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("Path");

                    b.Property<int>("PostBlogId");

                    b.HasKey("Id")
                        .HasName("pk_constraint_image");

                    b.HasIndex("PostBlogId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnName("creationdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("namepostblog")
                        .HasMaxLength(100);

                    b.Property<string>("Plot")
                        .IsRequired()
                        .HasColumnName("plot");

                    b.Property<int>("TripId")
                        .HasColumnName("tripid");

                    b.HasKey("Id")
                        .HasName("pk_constraint_postblog");

                    b.HasIndex("TripId");

                    b.ToTable("PostBlog");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountSpent")
                        .HasColumnName("amountspent");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<int>("PostBlogId");

                    b.HasKey("Id")
                        .HasName("pk_constraint_purchase");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PostBlogId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Rating", b =>
                {
                    b.Property<int>("UserInfoId")
                        .HasColumnName("userinfoid");

                    b.Property<int>("TripId")
                        .HasColumnName("tripid");

                    b.Property<bool?>("RatingPostBlog")
                        .HasColumnName("ratingpostblog");

                    b.HasKey("UserInfoId", "TripId")
                        .HasName("pk_constraint_rating");

                    b.HasIndex("TripId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Subscription", b =>
                {
                    b.Property<int>("UserInfoId")
                        .HasColumnName("userinfoid");

                    b.Property<int>("SubcriberId")
                        .HasColumnName("subscriberid");

                    b.HasKey("UserInfoId", "SubcriberId")
                        .HasName("pk_constraint_subscription");

                    b.HasIndex("SubcriberId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("tagname")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("pk_constraint_tag");

                    b.HasAlternateKey("Name")
                        .HasName("uq_constraint_tag");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.TagPostBlog", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("tagid");

                    b.Property<int>("PostBlogId")
                        .HasColumnName("postblogid");

                    b.HasKey("TagId", "PostBlogId")
                        .HasName("pk_constraint_tagpostblog");

                    b.HasIndex("PostBlogId");

                    b.ToTable("TagPostBlog");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.TagTrip", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("tagid");

                    b.Property<int>("TripId")
                        .HasColumnName("tripid");

                    b.HasKey("TagId", "TripId")
                        .HasName("pk_constraint_tagtrip");

                    b.HasIndex("TripId");

                    b.ToTable("TagTrip");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDone")
                        .HasColumnName("isDone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("postname");

                    b.Property<int>("UserInfoId");

                    b.HasKey("Id")
                        .HasName("pk_constraint_trip");

                    b.HasAlternateKey("Name")
                        .HasName("uq_constraint_trip");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnName("Path");

                    b.Property<int>("UserInfoId")
                        .HasColumnName("userinfoid");

                    b.HasKey("Id")
                        .HasName("pk_constraint_userimage");

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.ToTable("UserImage");
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("dateofbirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasMaxLength(50);

                    b.Property<string>("IdentityId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_constraint_user");

                    b.HasIndex("CountryId");

                    b.HasIndex("IdentityId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Comment", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", "Trip")
                        .WithMany("Comments")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_constraint_TripId_comment")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "UserInfo")
                        .WithMany("Comments")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_constraint_userinfoid_comment")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.CountryPostBlog", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Country", "Country")
                        .WithMany("CountryPostBlogs")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_constraint_countryid_countrypostblog")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", "PostBlog")
                        .WithMany("CountryPostBlogs")
                        .HasForeignKey("PostBlogId")
                        .HasConstraintName("fk_constraint_postblogid_countrypostblog")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.CountryTrip", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Country", "Country")
                        .WithMany("CountryTrips")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_constraint_countryid_countrytrip")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", "Trip")
                        .WithMany("CountryTrips")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_constraint_tripid_countrytrip")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Image", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", "PostBlog")
                        .WithMany("Images")
                        .HasForeignKey("PostBlogId")
                        .HasConstraintName("fk_constraint_postblogid_image")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", "Trip")
                        .WithMany("PostBlogs")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_constraint_postblog")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Purchase", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Currency", "Currency")
                        .WithMany("Purchases")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_constraint_purchase_currencyid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", "PostBlog")
                        .WithMany("Purchases")
                        .HasForeignKey("PostBlogId")
                        .HasConstraintName("fk_constraint_purchase_postblogid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Rating", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_constraint_tripid_rating")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "UserInfo")
                        .WithMany("Ratings")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_constraint_userinfoid_rating")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Subscription", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "SubscriberIdNavidgation")
                        .WithMany("RelationWithSubscriberIdNavigation")
                        .HasForeignKey("SubcriberId")
                        .HasConstraintName("fk_constraint_subscriberid_subscription")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "UserInfoIdNavigation")
                        .WithMany("RelationWithUserIdNavigation")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_constraint_userinfoid_subscription")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.TagPostBlog", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.PostBlog", "PostBlog")
                        .WithMany("TagPostBlogs")
                        .HasForeignKey("PostBlogId")
                        .HasConstraintName("fk_constraint_postblogid_tagpostblog")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Tag", "Tag")
                        .WithMany("TagPostBlogs")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_constraint_tagid_tagpostblog")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.TagTrip", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Tag", "Tag")
                        .WithMany("TagTrips")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_constraint_tagid_tagtrip")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", "Post")
                        .WithMany("TagTrips")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_constraint_tripid_tagtrip")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.Trip", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "UserInfo")
                        .WithMany("Trips")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_userinfoid_trip")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.UserImage", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", "UserInfo")
                        .WithOne("UserImage")
                        .HasForeignKey("TravelingBlog.DataAcceesLayer.Models.Entities.UserImage", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelingBlog.DataAcceesLayer.Models.Entities.UserInfo", b =>
                {
                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.Country", "Country")
                        .WithMany("UserInfoes")
                        .HasForeignKey("CountryId");

                    b.HasOne("TravelingBlog.DataAcceesLayer.Models.Entities.AppUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });
#pragma warning restore 612, 618
        }
    }
}
